version: '3.8'

services:
  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: brokerage-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/load-balancer/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
      - ./static:/var/www/static:ro
    networks:
      - brokerage-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: brokerage-postgres
    environment:
      - POSTGRES_DB=brokerage
      - POSTGRES_USER=brokerage_user
      - POSTGRES_PASSWORD=secure_production_password_here
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/migrations:/docker-entrypoint-initdb.d
      - ./infrastructure/database/backups:/backups
    networks:
      - brokerage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U brokerage_user -d brokerage"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Redis
  redis:
    image: redis:7-alpine
    container_name: brokerage-redis
    command: redis-server --appendonly yes --requirepass secure_redis_password_here
    volumes:
      - redis_data:/data
    networks:
      - brokerage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "secure_redis_password_here", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Event Bus
  event-bus:
    image: brokerage/event-bus:latest
    container_name: brokerage-event-bus
    environment:
      - NODE_ENV=production
      - PORT=3020
      - DB_HOST=postgres
      - DB_NAME=brokerage_events
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Monitoring System
  monitoring:
    image: brokerage/monitoring:latest
    container_name: brokerage-monitoring
    environment:
      - NODE_ENV=production
      - PORT=3021
      - DB_HOST=postgres
      - DB_NAME=brokerage_monitoring
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: brokerage-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - brokerage-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: brokerage-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - brokerage-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Microservices (with auto-scaling)
  algorithmic-trading:
    image: brokerage/algorithmic-trading:latest
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=postgres
      - DB_NAME=brokerage_algorithmic_trading
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - event-bus
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  risk-monitoring:
    image: brokerage/risk-monitoring:latest
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DB_HOST=postgres
      - DB_NAME=brokerage_risk_monitoring
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - event-bus
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  compliance-engine:
    image: brokerage/compliance-engine:latest
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DB_HOST=postgres
      - DB_NAME=brokerage_compliance
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - event-bus
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  fraud-detection:
    image: brokerage/fraud-detection:latest
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DB_HOST=postgres
      - DB_NAME=brokerage_fraud_detection
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - event-bus
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  tax-optimization:
    image: brokerage/tax-optimization:latest
    environment:
      - NODE_ENV=production
      - PORT=3005
      - DB_HOST=postgres
      - DB_NAME=brokerage_tax_optimization
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - event-bus
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  performance-analytics:
    image: brokerage/performance-analytics:latest
    environment:
      - NODE_ENV=production
      - PORT=3006
      - DB_HOST=postgres
      - DB_NAME=brokerage_performance_analytics
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - event-bus
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  market-data-processing:
    image: brokerage/market-data-processing:latest
    environment:
      - NODE_ENV=production
      - PORT=3007
      - DB_HOST=postgres
      - DB_NAME=brokerage_market_data
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - event-bus
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  custom-reporting:
    image: brokerage/custom-reporting:latest
    environment:
      - NODE_ENV=production
      - PORT=3008
      - DB_HOST=postgres
      - DB_NAME=brokerage_custom_reporting
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - event-bus
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  zero-trust-security:
    image: brokerage/zero-trust-security:latest
    environment:
      - NODE_ENV=production
      - PORT=3009
      - DB_HOST=postgres
      - DB_NAME=brokerage_zero_trust
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - event-bus
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  integration-hub:
    image: brokerage/integration-hub:latest
    environment:
      - NODE_ENV=production
      - PORT=3010
      - DB_HOST=postgres
      - DB_NAME=brokerage_integration
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - event-bus
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  notification-system:
    image: brokerage/notification-system:latest
    environment:
      - NODE_ENV=production
      - PORT=3011
      - DB_HOST=postgres
      - DB_NAME=brokerage_notifications
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - event-bus
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  intelligent-kyc:
    image: brokerage/intelligent-kyc:latest
    environment:
      - NODE_ENV=production
      - PORT=3012
      - DB_HOST=postgres
      - DB_NAME=brokerage_kyc
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - event-bus
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  identity-verification:
    image: brokerage/identity-verification:latest
    environment:
      - NODE_ENV=production
      - PORT=3013
      - DB_HOST=postgres
      - DB_NAME=brokerage_identity
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - event-bus
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  onboarding-orchestrator:
    image: brokerage/onboarding-orchestrator:latest
    environment:
      - NODE_ENV=production
      - PORT=3014
      - DB_HOST=postgres
      - DB_NAME=brokerage_onboarding
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - event-bus
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  brokerage-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
