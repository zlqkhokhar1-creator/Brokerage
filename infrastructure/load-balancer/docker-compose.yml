version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: brokerage-load-balancer
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
      - ./static:/var/www/static:ro
      - ./error:/var/www/error:ro
    networks:
      - brokerage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Gateway instances
  api-gateway-1:
    image: brokerage/api-gateway:latest
    container_name: api-gateway-1
    environment:
      - NODE_ENV=production
      - PORT=3010
      - DB_HOST=postgres
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  api-gateway-2:
    image: brokerage/api-gateway:latest
    container_name: api-gateway-2
    environment:
      - NODE_ENV=production
      - PORT=3010
      - DB_HOST=postgres
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  api-gateway-3:
    image: brokerage/api-gateway:latest
    container_name: api-gateway-3
    environment:
      - NODE_ENV=production
      - PORT=3010
      - DB_HOST=postgres
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Algorithmic Trading instances
  algorithmic-trading-1:
    image: brokerage/algorithmic-trading:latest
    container_name: algorithmic-trading-1
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=postgres
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  algorithmic-trading-2:
    image: brokerage/algorithmic-trading:latest
    container_name: algorithmic-trading-2
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=postgres
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  algorithmic-trading-3:
    image: brokerage/algorithmic-trading:latest
    container_name: algorithmic-trading-3
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=postgres
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Risk Monitoring instances
  risk-monitoring-1:
    image: brokerage/risk-monitoring:latest
    container_name: risk-monitoring-1
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DB_HOST=postgres
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  risk-monitoring-2:
    image: brokerage/risk-monitoring:latest
    container_name: risk-monitoring-2
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DB_HOST=postgres
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  risk-monitoring-3:
    image: brokerage/risk-monitoring:latest
    container_name: risk-monitoring-3
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DB_HOST=postgres
      - REDIS_HOST=redis
    networks:
      - brokerage-network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: brokerage-postgres
    environment:
      - POSTGRES_DB=brokerage
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - brokerage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis
  redis:
    image: redis:7-alpine
    container_name: brokerage-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - brokerage-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: brokerage-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - brokerage-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: brokerage-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - brokerage-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  brokerage-network:
    driver: bridge
