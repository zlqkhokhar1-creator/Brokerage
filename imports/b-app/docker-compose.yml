services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: investpro-postgres
    environment:
      POSTGRES_USER: investpro
      POSTGRES_PASSWORD: secure_password_123
      POSTGRES_DB: brokerage
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/backend/db/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./apps/backend/db/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    networks:
      - investpro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U investpro -d brokerage"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build: 
      context: ./apps/backend
      dockerfile: Dockerfile
    container_name: investpro-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgres://investpro:secure_password_123@postgres:5432/brokerage
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
      PORT: 5000
      FRONTEND_URL: http://localhost:3000
      LANDING_URL: http://localhost:3001
      STRIPE_SECRET_KEY: sk_test_your_stripe_secret_key
    ports:
      - '5001:5000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - investpro-network
    restart: unless-stopped
    volumes:
      - ./apps/backend/logs:/app/logs

  # Web Portal (Authenticated Dashboard)
  web-portal:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: investpro-web-portal
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:5001/api/v1
      NEXT_PUBLIC_LANDING_URL: http://localhost:3001
    ports:
      - '3000:3000'
    depends_on:
      - backend
    networks:
      - investpro-network
    restart: unless-stopped

  # Landing Page (Static Marketing Site)
  landing:
    build:
      context: ./apps/landing
      dockerfile: Dockerfile
    container_name: investpro-landing
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:5001/api/v1
      NEXT_PUBLIC_WEB_PORTAL_URL: http://localhost:3000
    ports:
      - '3001:3000'
    networks:
      - investpro-network
    restart: unless-stopped

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: investpro-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - investpro-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: investpro-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - web-portal
      - backend
    networks:
      - investpro-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  investpro-network:
    driver: bridge
