name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Monorepo TypeScript packages & services
  typescript-services:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build shared package
        run: |
          if [ -d packages/shared ]; then
            npm run build --workspace=packages/shared
          else
            echo "packages/shared not found, skipping."
          fi

      - name: Lint TypeScript code
        run: |
          if npm run | grep -q "lint"; then
            npm run lint
          else
            echo "No lint script defined."
          fi

      - name: Type check
        run: |
            if npm run | grep -q "type-check"; then
              npm run type-check
            elif npm run | grep -q "typecheck"; then
              npm run typecheck
            else
              echo "No type-check or typecheck script defined."
            fi

      - name: Test services
        run: |
          # Run tests for each service workspace if present
            for svc in gateway risk ledger feature-store; do
              if npm run | grep -q "test"; then
                npm run test --workspace=services/$svc --if-present
              fi
            done

  # Rust matching engine (from engine/matching)
  rust-matching-engine:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: engine/matching/target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        working-directory: engine/matching
        run: cargo fmt -- --check

      - name: Run clippy
        working-directory: engine/matching
        run: cargo clippy -- -D warnings

      - name: Build matching engine
        working-directory: engine/matching
        run: cargo build --release

      - name: Test matching engine
        working-directory: engine/matching
        run: cargo test --all-features

  # Integration tests (depends on builds)
  integration-tests:
    runs-on: ubuntu-latest
    needs: [ typescript-services, rust-matching-engine ]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: brokerage_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build all services
        run: npm run build --if-present

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/brokerage_test
          NODE_ENV: test
        run: |
          # Ledger migrations (if script exists)
          if npm run | grep -q "migrate"; then
            npm run migrate --workspace=services/ledger --if-present
          fi
          # Integration test script fallback logic
          if npm run | grep -q "test:integration"; then
            npm run test:integration --if-present
          else
            echo "No integration test script defined."
          fi

  # Security & dependency scanning (non-blocking)
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install (minimal) dependencies
        run: npm ci --omit=dev || npm ci

      - name: Run npm audit (non-fail)
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

  # Docker image builds (only on main branch pushes)
  docker-build:
    runs-on: ubuntu-latest
    needs: [ typescript-services, rust-matching-engine ]
    if: github.ref == 'refs/heads/main'

    strategy:
      matrix:
        service: [ gateway, risk, ledger, feature-store ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: |
            brokerage/${{ matrix.service }}:latest
            brokerage/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max